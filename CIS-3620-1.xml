<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="COML.xsl" type="text/xsl" media="screen" ?>
<?mso-infoPathSolution productVersion="11.0.8034" PIVersion="1.0.0.0" name="urn:schemas-microsoft-com:office:infopath:COML:http---www-vtc-vsc-edu-COML-0-0" language="en-us" href="COML.xsn" solutionVersion="1.0.0.47" ?>
<?mso-application progid="InfoPath.Document"?>

<outline created="2011-08-08" xmlns="http://www.vtc.vsc.edu/COML_0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.vtc.vsc.edu/COML_0.0 COML.xsd">

  <summary>
    <authors>
      <author>Peter C. Chapin</author>
    </authors>
    <department-program>Computer Information Systems</department-program>
    <number>CIS-3620</number>
    <title>High Integrity Programming</title>
    <prerequisites>
      <AND>
        <course>CIS-2260</course>
        <course>MAT-2120</course>
      </AND>
    </prerequisites>
    <credits>3</credits>
    <graded>true</graded>
    <time lecture="3" recitation="0" laboratory="0" studio="0" study="6"/>
    <semesters>
      <semester>Fall</semester>
      <semester>Spring</semester>
    </semesters>
    <description>This course describes techniques for developing software with extreme
      reliability requirements. The course emphasizes the use of the SPARK tool set during the 
      construction phase of the software development life cycle. Topics include the SPARK
      language, SPARK flow analysis, and building proofs of program correctness. Selected
      mathematical topics are developed or reviewed as necessary. Other topics in formal
      methods are introduced to help provide context and perspective.</description>
  </summary>

  <short-title>High Integ. Prog.</short-title>
  <course-level>3000</course-level>
  <required-texts>
    <book>
      <title>High Integrity Software</title>
      <authors>
        <author>John Barnes</author>
      </authors>
      <publisher>Addison-Wesley</publisher>
      <copyright>2003</copyright>
      <ISBN>0-321-13616-0</ISBN>
    </book>
  </required-texts>

  <course-outcomes>
    <outcome>The student understands the nature of high integrity software, the role formal
      methods play in developing such software, and the limitations of formal methods.</outcome>
    <outcome>The student is able to use the SPARK language to write simple but non-trivial 
      program components.</outcome>
    <outcome>The student understands the significance of SPARK's language restrictions with
      respect to how those restrictions simplify the construction of high integrity software.</outcome>
    <outcome>The student is able to use the SPARK tools to conduct a flow analysis of their
      programs, understand the significance of the errors reported, and correct those errors.</outcome>
    <outcome>The student is able to use the SPARK tools to automatically build proofs of 
      correctness (freedom from runtime errors, proofs of pre/post condition and invariant
      satisfaction).</outcome>
    <outcome>The student is able to manually construct proofs of correctness using the SPARK
      tools to check the proofs.</outcome>
  </course-outcomes>

  <course-content>
    <topic hours="5.0">Selected topics from mathematics (logic, proof techniques, sets)</topic>
    <topic hours="3.0">Selected topics from formal methods (for example, formal specification)</topic>
    <topic hours="10.0">The SPARK language</topic>
    <topic hours="4.0">Basic use of SPARK tools (flow analysis)</topic>
    <topic hours="10.0">Automated proof techniques</topic>
    <topic hours="10.0">Manual proof techniques</topic>
  </course-content>
  
  <delivery-method>online</delivery-method>
</outline>
